{"version":3,"sources":["Components/Square.module.css","Components/ApplicationBar.module.css","Components/ActionButtons.module.css","Components/TableLayout.module.css","App.module.css","Components/TableLayout.js","Timer.js","GlobalTimer.js","ReduxStore/squareSlice.js","utils.js","ReduxStore/resultDialogSlice.js","Components/ApplicationBar.js","Components/green.png","Components/red.png","Components/ActionButtons.js","ReduxStore/store.js","Components/ResultDialog.js","Components/GrayBox.js","Components/BlackBox.js","Components/Square.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RowDefinition","style","flex","this","Row","props","className","styles","tableLayoutRow","children","ColumnDefinition","Column","tableLayoutColumn","TableLayout","rows","columns","cells","extractCell","rIndex","cIndex","tableLayout","map","r","c","Timer","timerId","second","timeOutFunc","stop","setInterval","clearInterval","GlobalTimer","_timer","_instance","start","squareSlice","createSlice","name","initialState","color","nextColor","started","nextTime","totalDisplayedBlack","correctBlackSeenAnswer","wrongBlackSeenAnswer","blackSeenResponseTimeRange","reducers","squareRestart","state","action","instance","newState","squareStop","goGray","lb","ub","time","Math","floor","random","goBlack","cTime","blackSeen","actions","selectSquareStarted","square","selectSquareColor","resultDialogSlice","open","resultDialogShow","resultDialogClose","selectResultDialogOpen","resultDialog","ApplicationBar","dispatch","useDispatch","width","Button","variant","startIcon","classnames","appBarBtn","restart","onClick","Typography","appBarTitle","finish","ActionButtons","useState","imgSize","setImgSize","container","red","ref","el","bRect","getBoundingClientRect","h","height","w","src","ImgRed","alt","green","ImgGreen","configureStore","reducer","squareReducer","resultDialogReducer","ResultDialog","useSelector","displayedBlackCount","store","getState","correctBlackSeen","selectCorrectBlackSeenAnswer","wrongBlackSeen","selectWrongBlackSeenAnswer","Dialog","onClose","DialogTitle","DialogContent","round","GrayBox","on","setOn","useEffect","setTimeout","console","log","gray","white","BlackBox","black","Square","selectSquareNextColor","currentTime","isCounting","App","appRoot","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4348f39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"white\":\"Square_white__2aF08\",\"gray\":\"Square_gray__2rUbc\",\"black\":\"Square_black__26bid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBarTitle\":\"ApplicationBar_appBarTitle__9chKn\",\"appBarBtn\":\"ApplicationBar_appBarBtn__1l6cl\",\"restart\":\"ApplicationBar_restart__nJ1Yx\",\"finish\":\"ApplicationBar_finish__2htYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ActionButtons_container__23KbH\",\"red\":\"ActionButtons_red__388w5\",\"green\":\"ActionButtons_green__23NJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableLayout\":\"TableLayout_tableLayout__1DzfF\",\"tableLayoutRow\":\"TableLayout_tableLayoutRow__jiSwO\",\"tableLayoutColumn\":\"TableLayout_tableLayoutColumn__TB2Ya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appRoot\":\"App_appRoot__7ECTj\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TableLayout.module.css\";\n\nexport class RowDefinition {\n  style = {};\n  constructor(style = { flex: 1 }) {\n    this.style = style;\n  }\n}\n\nRow.propTypes = {\n  style: PropTypes.object.isRequired,\n};\n\nfunction Row(props) {\n  return (\n    <div className={styles.tableLayoutRow} style={props.style}>\n      {props.children}\n    </div>\n  );\n}\n\nColumn.propTypes = {\n  style: PropTypes.object.isRequired,\n};\n\nexport class ColumnDefinition {\n  style = {};\n  constructor(style = { flex: 1 }) {\n    this.style = style;\n  }\n}\n\nfunction Column(props) {\n  return (\n    <div className={styles.tableLayoutColumn} style={props.style}>\n      {props.children}\n    </div>\n  );\n}\n\nTableLayout.propTypes = {\n  style: PropTypes.object,\n  rows: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  cells: PropTypes.array.isRequired,\n};\n\nexport function TableLayout(props) {\n  const { style, rows, columns, cells } = props;\n\n  const extractCell = (rIndex, cIndex) => {\n    if (cells && cells[rIndex] && cells[rIndex][cIndex]) {\n      return cells[rIndex][cIndex];\n    }\n  };\n\n  return (\n    <div className={styles.tableLayout} style={style}>\n      {rows.map((r, rIndex) => {\n        return (\n          <Row key={rIndex} style={r.style}>\n            {columns.map((c, cIndex) => {\n              return (\n                <Column key={cIndex} style={c.style}>\n                  {extractCell(rIndex, cIndex)}\n                </Column>\n              );\n            })}\n          </Row>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TableLayout;\n","class Timer {\n  timerId = null;\n  second = 0;\n  start(timeOutFunc = null) {\n    if (this.timerId !== null) {\n      this.stop();\n    }\n    this.second = 0;\n    this.timerId = setInterval(() => {\n      this.second += 0.5;\n      if (timeOutFunc !== null) timeOutFunc(this.second);\n    }, 500);\n  }\n\n  stop() {\n    if (this.timerId !== null) {\n      clearInterval(this.timerId);\n      this.timerId = null;\n    }\n  }\n}\n\nexport default Timer;\n","import Timer from \"./Timer\";\n\nclass GlobalTimer {\n  static _instance = null;\n  static instance() {\n    if (this._instance === null) {\n      this._instance = new GlobalTimer();\n    }\n    return this._instance;\n  }\n\n  _timer = null;\n  constructor() {\n    this._timer = new Timer();\n  }\n\n  start() {\n    this._timer.start();\n  }\n\n  stop() {\n    this._timer.stop();\n  }\n\n  time() {\n    return this._timer.second;\n  }\n\n  isCounting() {\n    return this._timer.timerId !== null;\n  }\n}\n\nexport default GlobalTimer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport GlobalTimer from \"../GlobalTimer\";\nimport { randomInt } from \"../utils\";\n\nconst getInitialState = () => {\n  return {\n    color: \"gray\",\n    nextColor: \"gray\",\n    started: false,\n    nextTime: 2,\n    totalDisplayedBlack: 0,\n    correctBlackSeenAnswer: 0,\n    wrongBlackSeenAnswer: 0,\n    blackSeenResponseTimeRange: [0, 0],\n  };\n};\n\nexport const squareSlice = createSlice({\n  name: \"square\",\n  initialState: getInitialState(),\n\n  reducers: {\n    squareRestart: (state, action) => {\n      GlobalTimer.instance().start();\n\n      const newState = getInitialState();\n      newState.started = true;\n      return newState;\n    },\n    squareStop: (state, action) => {\n      GlobalTimer.instance().stop();\n      state.started = false;\n    },\n\n    goGray: (state, action) => {\n      state.color = \"gray\";\n      state.nextColor = \"black\";\n      state.nextTime = GlobalTimer.instance().time() + randomInt(10, 20);\n    },\n    goBlack: (state, action) => {\n      state.color = \"black\";\n      state.nextColor = \"gray\";\n      const cTime = GlobalTimer.instance().time();\n      state.nextTime = cTime + 0.5;\n\n      state.blackSeenResponseTimeRange = [cTime, cTime + 1.5];\n      state.totalDisplayedBlack++;\n    },\n\n    blackSeen: (state, action) => {\n      const cTime = GlobalTimer.instance().time();\n      if (\n        state.blackSeenResponseTimeRange[0] <= cTime &&\n        cTime <= state.blackSeenResponseTimeRange[1]\n      ) {\n        state.correctBlackSeenAnswer++;\n      } else {\n        state.wrongBlackSeenAnswer++;\n      }\n    },\n  },\n});\n\nexport const {\n  squareRestart,\n  squareStop,\n  goGray,\n  goBlack,\n  blackSeen,\n} = squareSlice.actions;\n\nexport const selectSquareStarted = (state) => state.square.started;\nexport const selectSquareColor = (state) => state.square.color;\nexport const selectSquareNextColor = (state) => state.square.nextColor;\nexport const selectSquareNextTime = (state) => state.square.nextTime;\n\nexport const selectTotalDisplayedBlack = (state) =>\n  state.square.totalDisplayedBlack;\nexport const selectCorrectBlackSeenAnswer = (state) =>\n  state.square.correctBlackSeenAnswer;\nexport const selectWrongBlackSeenAnswer = (state) =>\n  state.square.wrongBlackSeenAnswer;\n\nexport default squareSlice.reducer;\n","export const randomInt = (lb, ub) => {\n  return lb + Math.floor(Math.random() * (ub - lb));\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const resultDialogSlice = createSlice({\n  name: \"resultDialog\",\n  initialState: {\n    open: false,\n  },\n  reducers: {\n    resultDialogShow: (state, action) => {\n      state.open = true;\n    },\n    resultDialogClose: (state, action) => {\n      state.open = false;\n    },\n  },\n});\n\nexport const {\n  resultDialogShow,\n  resultDialogClose,\n} = resultDialogSlice.actions;\n\nexport const selectResultDialogOpen = (state) => state.resultDialog.open;\n\nexport default resultDialogSlice.reducer;\n","import React from \"react\";\nimport styles from \"./ApplicationBar.module.css\";\n\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { RiRestartLine } from \"react-icons/ri\";\nimport classnames from \"classnames\";\nimport { MdGrade } from \"react-icons/md\";\nimport { useDispatch } from \"react-redux\";\nimport { squareRestart, squareStop } from \"../ReduxStore/squareSlice\";\nimport { resultDialogShow } from \"../ReduxStore/resultDialogSlice\";\n\nconst ApplicationBar = () => {\n  const dispatch = useDispatch();\n  const onStartClick = () => {\n    dispatch(squareRestart());\n  };\n\n  const onFinishClick = () => {\n    dispatch(squareStop());\n    dispatch(resultDialogShow());\n  };\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[\n        new ColumnDefinition({ width: 110 }),\n        new ColumnDefinition(),\n        new ColumnDefinition({ width: 110 }),\n      ]}\n      cells={[\n        [\n          <Button\n            variant={\"contained\"}\n            startIcon={<RiRestartLine />}\n            className={classnames(styles.appBarBtn, styles.restart)}\n            onClick={onStartClick}\n          >\n            <Typography>Başla</Typography>\n          </Button>,\n          <Typography className={styles.appBarTitle}>Kararan Kare</Typography>,\n          <Button\n            variant={\"contained\"}\n            startIcon={<MdGrade />}\n            className={classnames(styles.appBarBtn, styles.finish)}\n            onClick={onFinishClick}\n          >\n            <Typography>Bitir</Typography>\n          </Button>,\n        ],\n      ]}\n    />\n  );\n};\n\nexport default ApplicationBar;\n","export default __webpack_public_path__ + \"static/media/green.307be109.png\";","export default __webpack_public_path__ + \"static/media/red.f326c9ba.png\";","import React, { useState } from \"react\";\nimport styles from \"./ActionButtons.module.css\";\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport ImgGreen from \"./green.png\";\nimport ImgRed from \"./red.png\";\nimport classnames from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { blackSeen } from \"../ReduxStore/squareSlice\";\n\nconst ActionButtons = (props) => {\n  const [imgSize, setImgSize] = useState(0);\n  const dispatch = useDispatch();\n\n  const onGreen = () => {\n    dispatch(blackSeen());\n  };\n\n  const onRed = () => {};\n\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[new ColumnDefinition(), new ColumnDefinition()]}\n      cells={[\n        [\n          <div\n            className={classnames(styles.container, styles.red)}\n            ref={(el) => {\n              if (!el) return;\n              const bRect = el.getBoundingClientRect();\n              const h = bRect.height;\n              const w = bRect.width;\n              if (h <= w) setImgSize(h);\n              else setImgSize(w);\n            }}\n          >\n            <img\n              src={ImgRed}\n              height={imgSize}\n              width={imgSize}\n              onClick={onRed}\n              alt={\"red\"}\n            />\n            ,\n          </div>,\n          <div className={classnames(styles.container, styles.green)}>\n            <img\n              src={ImgGreen}\n              height={imgSize}\n              width={imgSize}\n              onClick={onGreen}\n              alt={\"green\"}\n            />\n            ,\n          </div>,\n        ],\n      ]}\n    />\n  );\n};\n\nActionButtons.propTypes = {};\n\nexport default ActionButtons;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport squareReducer from \"./squareSlice\";\nimport resultDialogReducer from \"./resultDialogSlice\";\nexport default configureStore({\n  reducer: {\n    square: squareReducer,\n    resultDialog: resultDialogReducer,\n  },\n});\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport store from \"../ReduxStore/store\";\nimport {\n  selectCorrectBlackSeenAnswer,\n  selectTotalDisplayedBlack,\n  selectWrongBlackSeenAnswer,\n} from \"../ReduxStore/squareSlice\";\nimport {\n  resultDialogClose,\n  selectResultDialogOpen,\n} from \"../ReduxStore/resultDialogSlice\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function ResultDialog() {\n  const open = useSelector(selectResultDialogOpen);\n  const dispatch = useDispatch();\n\n  const onClose = () => {\n    dispatch(resultDialogClose());\n  };\n\n  const displayedBlackCount = selectTotalDisplayedBlack(store.getState());\n  const correctBlackSeen = selectCorrectBlackSeenAnswer(store.getState());\n  const wrongBlackSeen = selectWrongBlackSeenAnswer(store.getState());\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{\"Alıştırma Sonucu\"}</DialogTitle>\n      <DialogContent>\n        <Typography>{`Toplam gösterilen siyah: ${displayedBlackCount}`}</Typography>\n        <Typography>{`Doğru cevaplanan siyah: ${correctBlackSeen}`}</Typography>\n        <Typography>{`Siyah olmadığı halde siyah denilen: ${wrongBlackSeen}`}</Typography>\n        <Typography>{`Başarı oranı: %${\n          100 * Math.round(correctBlackSeen / displayedBlackCount)\n        }`}</Typography>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./Square.module.css\";\nconst GrayBox = () => {\n  const [on, setOn] = useState(false);\n  useEffect(() => {\n    const timerId = setTimeout(\n      () => {\n        console.log(\"ADASDSAD\");\n        setOn(!on);\n      },\n      on ? 1500 : 500\n    );\n\n    return () => {\n      setTimeout(timerId);\n    };\n  }, [on]);\n\n  return (\n    <div\n      className={on ? styles.gray : styles.white}\n      style={{ width: 150, height: 150 }}\n    ></div>\n  );\n};\n\nexport default GrayBox;\n","import React from \"react\";\nimport styles from \"./Square.module.css\";\n\nconst BlackBox = () => {\n  return <div className={styles.black} style={{ width: 150, height: 150 }} />;\n};\n\nexport default BlackBox;\n","import React, { useEffect } from \"react\";\nimport styles from \"./Square.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  goBlack,\n  goGray,\n  goWhite,\n  selectSquareColor,\n  selectSquareNextColor,\n  selectSquareNextTime,\n  selectSquareStarted,\n  squareStop,\n} from \"../ReduxStore/squareSlice\";\nimport GlobalTimer from \"../GlobalTimer\";\nimport store from \"../ReduxStore/store\";\nimport { resultDialogShow } from \"../ReduxStore/resultDialogSlice\";\nimport GrayBox from \"./GrayBox\";\nimport BlackBox from \"./BlackBox\";\nconst Square = (props) => {\n  const started = useSelector(selectSquareStarted);\n  const color = useSelector(selectSquareColor);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setInterval(() => {\n      // console.log(\"Square timeout\");\n      const nextTime = selectSquareNextTime(store.getState());\n      const nextColor = selectSquareNextColor(store.getState());\n      const currentTime = GlobalTimer.instance().time();\n      if (currentTime >= 60 && GlobalTimer.instance().isCounting()) {\n        dispatch(squareStop());\n        dispatch(resultDialogShow());\n      }\n\n      if (nextTime <= currentTime) {\n        switch (nextColor) {\n          case \"gray\":\n            dispatch(goGray());\n            break;\n          case \"black\":\n            dispatch(goBlack());\n            break;\n          default:\n            break;\n        }\n      }\n    }, 250);\n  }, [dispatch]);\n\n  let squareClass;\n  switch (color) {\n    case \"white\":\n      squareClass = styles.white;\n      break;\n    case \"gray\":\n      squareClass = styles.gray;\n      break;\n    case \"black\":\n      squareClass = styles.black;\n      break;\n    default:\n      squareClass = styles.white;\n  }\n\n  return started ? color === \"black\" ? <BlackBox /> : <GrayBox /> : \"\";\n  // <GrayBox></GrayBox>\n  // <BlackBox></BlackBox>\n  // <div className={squareClass} style={{ width: 150, height: 150 }}></div>\n};\n\nSquare.propTypes = {};\n\nexport default Square;\n","import React from 'react';\r\nimport styles from \"./App.module.css\";\r\nimport TableLayout, {ColumnDefinition, RowDefinition} from \"./Components/TableLayout\";\r\nimport ApplicationBar from \"./Components/ApplicationBar\";\r\nimport ActionButtons from \"./Components/ActionButtons\";\r\nimport ResultDialog from \"./Components/ResultDialog\";\r\nimport Square from \"./Components/Square\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={styles.appRoot}>\r\n      <TableLayout\r\n        rows={[\r\n          new RowDefinition({ height: 50 }),\r\n          new RowDefinition(),\r\n          new RowDefinition({ height: 75 }),\r\n        ]}\r\n        columns={[new ColumnDefinition()]}\r\n        cells={[\r\n          [<ApplicationBar />],\r\n          [<Square/>],\r\n          [<ActionButtons />],\r\n        ]}\r\n      />\r\n      <ResultDialog />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './ReduxStore/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}