{"version":3,"sources":["Components/ApplicationBar.module.css","Components/ActionButtons.module.css","Components/TableLayout.module.css","App.module.css","Components/TableLayout.js","Components/ApplicationBar.js","Components/green.png","Components/red.png","Components/ActionButtons.js","features/counter/counterSlice.js","ReduxStore/store.js","Components/ResultDialog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RowDefinition","style","flex","this","Row","props","className","styles","tableLayoutRow","children","ColumnDefinition","Column","tableLayoutColumn","TableLayout","rows","columns","cells","extractCell","rIndex","cIndex","tableLayout","map","r","c","ApplicationBar","useDispatch","width","Button","variant","startIcon","classnames","appBarBtn","restart","onClick","Typography","appBarTitle","finish","ActionButtons","useState","imgSize","setImgSize","container","red","ref","el","bRect","getBoundingClientRect","h","height","w","src","ImgRed","green","ImgGreen","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","ResultDialog","Dialog","open","onClose","App","appRoot","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4871f747.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBarTitle\":\"ApplicationBar_appBarTitle__9chKn\",\"appBarBtn\":\"ApplicationBar_appBarBtn__1l6cl\",\"restart\":\"ApplicationBar_restart__nJ1Yx\",\"finish\":\"ApplicationBar_finish__2htYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ActionButtons_container__23KbH\",\"red\":\"ActionButtons_red__388w5\",\"green\":\"ActionButtons_green__23NJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableLayout\":\"TableLayout_tableLayout__1DzfF\",\"tableLayoutRow\":\"TableLayout_tableLayoutRow__jiSwO\",\"tableLayoutColumn\":\"TableLayout_tableLayoutColumn__TB2Ya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appRoot\":\"App_appRoot__7ECTj\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TableLayout.module.css\";\n\nexport class RowDefinition {\n  style = {};\n  constructor(style = { flex: 1 }) {\n    this.style = style;\n  }\n}\n\nRow.propTypes = {\n  style: PropTypes.object.isRequired,\n};\n\nfunction Row(props) {\n  return (\n    <div className={styles.tableLayoutRow} style={props.style}>\n      {props.children}\n    </div>\n  );\n}\n\nColumn.propTypes = {\n  style: PropTypes.object.isRequired,\n};\n\nexport class ColumnDefinition {\n  style = {};\n  constructor(style = { flex: 1 }) {\n    this.style = style;\n  }\n}\n\nfunction Column(props) {\n  return (\n    <div className={styles.tableLayoutColumn} style={props.style}>\n      {props.children}\n    </div>\n  );\n}\n\nTableLayout.propTypes = {\n  style: PropTypes.object,\n  rows: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  cells: PropTypes.array.isRequired,\n};\n\nexport function TableLayout(props) {\n  const { style, rows, columns, cells } = props;\n\n  const extractCell = (rIndex, cIndex) => {\n    if (cells && cells[rIndex] && cells[rIndex][cIndex]) {\n      return cells[rIndex][cIndex];\n    }\n  };\n\n  return (\n    <div className={styles.tableLayout} style={style}>\n      {rows.map((r, rIndex) => {\n        return (\n          <Row key={rIndex} style={r.style}>\n            {columns.map((c, cIndex) => {\n              return (\n                <Column key={cIndex} style={c.style}>\n                  {extractCell(rIndex, cIndex)}\n                </Column>\n              );\n            })}\n          </Row>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TableLayout;\n","import React from \"react\";\nimport styles from \"./ApplicationBar.module.css\";\n\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { RiRestartLine } from \"react-icons/ri\";\nimport classnames from \"classnames\";\nimport { MdGrade } from \"react-icons/md\";\nimport { useDispatch } from \"react-redux\";\n// import {\n//   initExerciseSet,\n//   nextFigureSet,\n//   restart,\n//   selectTotalAnswer,\n//   selectWrongAnsweredFigureSets,\n// } from \"../ReduxStore/matchSlice\";\n// import store from \"../ReduxStore/store\";\n// import { resultDialogShow } from \"../ReduxStore/resultDialogSlice\";\n\nconst ApplicationBar = () => {\n  const dispatch = useDispatch();\n  const onStartClick = () => {\n    // dispatch(restart());\n    // dispatch(initExerciseSet());\n    // dispatch(nextFigureSet());\n  };\n\n  const onFinishClick = () => {\n    // const totalAnswer = selectTotalAnswer(store.getState());\n    // const wrongOnes = selectWrongAnsweredFigureSets(store.getState());\n    // console.log(totalAnswer);\n    // console.log(wrongOnes);\n    // console.log(\n    //   \"Success Rate:\",\n    //   (totalAnswer - wrongOnes.length) / totalAnswer\n    // );\n    // dispatch(resultDialogShow());\n  };\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[\n        new ColumnDefinition({ width: 110 }),\n        new ColumnDefinition(),\n        new ColumnDefinition({ width: 110 }),\n      ]}\n      cells={[\n        [\n          <Button\n            variant={\"contained\"}\n            startIcon={<RiRestartLine />}\n            className={classnames(styles.appBarBtn, styles.restart)}\n            onClick={onStartClick}\n          >\n            <Typography>Başla</Typography>\n          </Button>,\n          <Typography className={styles.appBarTitle}>\n            Şekil Eşleştirme\n          </Typography>,\n          <Button\n            variant={\"contained\"}\n            startIcon={<MdGrade />}\n            className={classnames(styles.appBarBtn, styles.finish)}\n            onClick={onFinishClick}\n          >\n            <Typography>Bitir</Typography>\n          </Button>,\n        ],\n      ]}\n    />\n  );\n};\n\nexport default ApplicationBar;\n","export default __webpack_public_path__ + \"static/media/green.307be109.png\";","export default __webpack_public_path__ + \"static/media/red.f326c9ba.png\";","import React, { useState } from \"react\";\nimport styles from \"./ActionButtons.module.css\";\nimport PropTypes from \"prop-types\";\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport ImgGreen from \"./green.png\";\nimport ImgRed from \"./red.png\";\nimport classnames from \"classnames\";\nimport { useDispatch } from \"react-redux\";\n// import { answerFigureSet, nextFigureSet } from \"../ReduxStore/matchSlice\";\n\nconst ActionButtons = (props) => {\n  const [imgSize, setImgSize] = useState(0);\n  const dispatch = useDispatch();\n\n  const onGreen = () => {\n    // dispatch(answerFigureSet(1));\n    // dispatch(nextFigureSet());\n  };\n\n  const onRed = () => {\n    // dispatch(answerFigureSet(0));\n    // dispatch(nextFigureSet());\n  };\n\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[new ColumnDefinition(), new ColumnDefinition()]}\n      cells={[\n        [\n          <div\n            className={classnames(styles.container, styles.red)}\n            ref={(el) => {\n              if (!el) return;\n              const bRect = el.getBoundingClientRect();\n              const h = bRect.height;\n              const w = bRect.width;\n              if (h <= w) setImgSize(h);\n              else setImgSize(w);\n            }}\n          >\n            <img\n              src={ImgRed}\n              height={imgSize}\n              width={imgSize}\n              onClick={onRed}\n            />\n            ,\n          </div>,\n          <div className={classnames(styles.container, styles.green)}>\n            <img\n              src={ImgGreen}\n              height={imgSize}\n              width={imgSize}\n              onClick={onGreen}\n            />\n            ,\n          </div>,\n        ],\n      ]}\n    />\n  );\n};\n\nActionButtons.propTypes = {};\n\nexport default ActionButtons;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import {\n//   resultDialogClose,\n//   selectResultDialogOpen,\n// } from \"../ReduxStore/resultDialogSlice\";\n// import {\n//   selectTotalAnswer,\n//   selectWrongAnsweredFigureSets,\n// } from \"../ReduxStore/matchSlice\";\nimport store from \"../ReduxStore/store\";\n\nexport default function ResultDialog() {\n  const open = false;\n  // const open = useSelector(selectResultDialogOpen);\n  const dispatch = useDispatch();\n\n  const onClose = () => {\n    // dispatch(resultDialogClose());\n  };\n\n  // const totalAnswer = selectTotalAnswer(store.getState());\n  // const wrongAnswers = selectWrongAnsweredFigureSets(store.getState());\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      {/*<DialogTitle>{\"Alıştırma Sonucu\"}</DialogTitle>*/}\n      {/*<DialogContent>*/}\n      {/*  <DialogContentText>*/}\n      {/*    <div>{`Toplam cevaplandırılan şekil: ${totalAnswer}`}</div>*/}\n      {/*    <div>{`Doğru cevap sayısı: ${*/}\n      {/*      totalAnswer - wrongAnswers.length*/}\n      {/*    }`}</div>*/}\n      {/*    <div>{`Yanlış cevap sayısı: ${wrongAnswers.length}`}</div>*/}\n      {/*    <div>{`Başarı oranı: %${Math.round(*/}\n      {/*      (100 * (totalAnswer - wrongAnswers.length)) / totalAnswer*/}\n      {/*    )}`}</div>*/}\n      {/*  </DialogContentText>*/}\n      {/*</DialogContent>*/}\n    </Dialog>\n  );\n}\n","import React from 'react';\r\nimport styles from \"./App.module.css\";\r\nimport TableLayout, {ColumnDefinition, RowDefinition} from \"./Components/TableLayout\";\r\nimport ApplicationBar from \"./Components/ApplicationBar\";\r\nimport ActionButtons from \"./Components/ActionButtons\";\r\nimport ResultDialog from \"./Components/ResultDialog\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={styles.appRoot}>\r\n      <TableLayout\r\n        rows={[\r\n          new RowDefinition({ height: 50 }),\r\n          new RowDefinition(),\r\n          new RowDefinition(),\r\n          new RowDefinition({ height: 75 }),\r\n        ]}\r\n        columns={[new ColumnDefinition()]}\r\n        cells={[\r\n          [<ApplicationBar />],\r\n          [\"\"],\r\n          [\"\"],\r\n          [<ActionButtons />],\r\n        ]}\r\n      />\r\n      <ResultDialog />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './ReduxStore/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}